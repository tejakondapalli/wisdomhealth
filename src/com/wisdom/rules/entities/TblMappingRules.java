package com.wisdom.rules.entities;

import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.WeakHashMap;

import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.proxy.HibernateProxy;

/**
 * Object mapping for hibernate-handled table: tblmappingrules.
 * 
 * @author autogenerated
 */

@Entity
@Table(name = "TblMappingRules")
public class TblMappingRules implements Cloneable, Serializable {

	/** Serial Version UID. */
	private static final long serialVersionUID = -558917084L;

	/**
	 * Use a WeakHashMap so entries will be garbage collected once all entities
	 * referring to a saved hash are garbage collected themselves.
	 */
	private static final Map<Serializable, Integer> SAVED_HASHES = Collections.synchronizedMap(new WeakHashMap<Serializable, Integer>());

	/** hashCode temporary storage. */
	private volatile Integer hashCode;
	/** Field mapping. */
	private Byte anyRegionUse;
	/** Field mapping. */
	private TblCodeFamily fkCodeFamilyId;
	/** Field mapping. */
	private TblConcept fkConceptId;
	/** Field mapping. */
	private Integer id = 0; // init for hibernate bug workaround
	/** Field mapping. */
	private String scope;
	/** Field mapping. */
	private Set<TblCodes> tblCodes = new TreeSet<TblCodes>();
	
	/** Field mapping. */
	private Set<TblSlots> tblSlots = new TreeSet<TblSlots>();
	
	/** Field mapping. */
	private Set<TblModifiers> tblModifiers = new TreeSet<TblModifiers>();
	
	private Set<TblRegionUseRules> tblRegionUseRules = new TreeSet<TblRegionUseRules>();

	/**
	 * Default constructor, mainly for hibernate use.
	 */
	public TblMappingRules() {
		// Default constructor
	}

	/**
	 * Constructor taking a given ID.
	 * 
	 * @param id
	 *            to set
	 */
	public TblMappingRules(Integer id) {
		this.id = id;
	}

	/**
	 * Return the type of this class. Useful for when dealing with proxies.
	 * 
	 * @return Defining class.
	 */
	@Transient
	public Class<?> getClassType() {
		return TblMappingRules.class;
	}

	/**
	 * Return the value associated with the column: anyregionuse.
	 * 
	 * @return A Byte object (this.anyregionuse)
	 */
	public Byte getAnyRegionUse() {
		return this.anyRegionUse;

	}

	/**
	 * Set the value related to the column: anyregionuse.
	 * 
	 * @param anyRegionUse
	 *            the anyregionuse value you wish to set
	 */
	public void setAnyRegionUse(final Byte anyRegionUse) {
		this.anyRegionUse = anyRegionUse;
	}
	
    /**
     * Return the value associated with the column: fkcodefamilyid.
	 * @return A Tblcodefamily object (this.fkcodefamilyid)
	 */
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "fkCodeFamilyId", nullable = false )
	public TblCodeFamily getFkCodeFamilyId() {
		return this.fkCodeFamilyId;
		
	}
	

  
    /**  
     * Set the value related to the column: fkcodefamilyid.
	 * @param fkCodeFamilyId the fkcodefamilyid value you wish to set
	 */
	public void setFkCodeFamilyId(final TblCodeFamily fkCodeFamilyId) {
		this.fkCodeFamilyId = fkCodeFamilyId;
	}

	/**
	 * Return the value associated with the column: id.
	 * 
	 * @return A Integer object (this.id)
	 */
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Basic(optional = false)
	@Column(name = "id", nullable = false)
	public Integer getId() {
		return this.id;

	}

	/**
	 * Set the value related to the column: id.
	 * 
	 * @param id
	 *            the id value you wish to set
	 */
	public void setId(final Integer id) {
		// If we've just been persisted and hashCode has been
		// returned then make sure other entities with this
		// ID return the already returned hash code
		if ((this.id == null || this.id == 0) && (id != null) && (this.hashCode != null)) {
			SAVED_HASHES.put(id, this.hashCode);
		}
		this.id = id;
	}

	/**
	 * Return the value associated with the column: scope.
	 * 
	 * @return A String object (this.scope)
	 */
	@Basic(optional = true)
	@Column(length = 45)
	public String getScope() {
		return this.scope;

	}

	/**
	 * Set the value related to the column: scope.
	 * 
	 * @param scope
	 *            the scope value you wish to set
	 */
	public void setScope(final String scope) {
		this.scope = scope;
	}

	
	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "tblMappingRulesCodes", joinColumns = @JoinColumn(name = "fkMappingRuleId", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "fkCodeId", referencedColumnName = "id"))
	@OrderBy("id ASC")
	public Set<TblCodes> getTblCodes() {
		return this.tblCodes;

	}

	/**
	 * Adds a bi-directional link of type Tblmappingrulescodes to the
	 * tblmappingrules set.
	 * 
	 * @param tblCode
	 *            item to add
	 */
	public void addTblCode(TblCodes tblCode) {
		this.tblCodes.add(tblCode);
	}

	public void setTblCodes(final Set<TblCodes> tblCodes) {
		this.tblCodes = tblCodes;
	}

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "tblMappingRulesModifiers", joinColumns = @JoinColumn(name = "fkMappingRuleId", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "fkModifierId", referencedColumnName = "id"))
	@OrderBy("id ASC")
	public Set<TblModifiers> getTblModifiers() {
		return tblModifiers;
	}

	public void setTblModifiers(Set<TblModifiers> tblModifiers) {
		this.tblModifiers = tblModifiers;
	}
	
	public void addTblModifiers(TblModifiers tblModifiers) {
		this.tblModifiers.add(tblModifiers);
	}

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "tblMappingRulesRegions", joinColumns = @JoinColumn(name = "fkMappingRuleId", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "fkRegionId", referencedColumnName = "id"))
	@OrderBy("id ASC")
	public Set<TblRegionUseRules> getTblRegionUseRules() {
		return tblRegionUseRules;
	}

	public void setTblRegionUseRules(Set<TblRegionUseRules> tblRegionUseRules) {
		this.tblRegionUseRules = tblRegionUseRules;
	}
	
	public void addTblRegionuseRules(TblRegionUseRules tblRegionUseRules) {
		this.tblRegionUseRules.add(tblRegionUseRules);
	}

	@ManyToMany(cascade = CascadeType.ALL)
	@JoinTable(name = "tblMappingRulesSlots", joinColumns = @JoinColumn(name = "fkMappingRuleId", referencedColumnName = "id"), inverseJoinColumns = @JoinColumn(name = "fkSlotId", referencedColumnName = "id"))
	@OrderBy("id ASC")
	public Set<TblSlots> getTblSlots() {
		return tblSlots;
	}

	public void setTblSlots(Set<TblSlots> tblSlots) {
		this.tblSlots = tblSlots;
	}
	
	public void addTblSlots(TblSlots tblSlots) {
		this.tblSlots.add(tblSlots);
	}
	
	@ManyToOne( cascade = { CascadeType.PERSIST, CascadeType.MERGE }, fetch = FetchType.LAZY )
	@org.hibernate.annotations.Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE})
	@Basic( optional = false )
	@JoinColumn(name = "fkConceptId", nullable = false )
	public TblConcept getFkConceptId() {
		return fkConceptId;
	}

	public void setFkConceptId(TblConcept fkConceptId) {
		this.fkConceptId = fkConceptId;
	}

	/**
	 * Deep copy.
	 * 
	 * @return cloned object
	 * @throws CloneNotSupportedException
	 *             on error
	 */
	@Override
	public TblMappingRules clone() throws CloneNotSupportedException {

		final TblMappingRules copy = (TblMappingRules) super.clone();

		copy.setAnyRegionUse(this.getAnyRegionUse());
		copy.setId(this.getId());
		copy.setScope(this.getScope());
		if (this.getTblCodes() != null) {
			copy.getTblCodes().addAll(this.getTblCodes());
		}
		return copy;
	}

	/**
	 * Provides toString implementation.
	 * 
	 * @see java.lang.Object#toString()
	 * @return String representation of this class.
	 */
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();

		sb.append("anyregionuse: " + this.getAnyRegionUse() + ", ");
		sb.append("id: " + this.getId() + ", ");
		sb.append("scope: " + this.getScope() + ", ");
		return sb.toString();
	}

	/**
	 * Equals implementation.
	 * 
	 * @see java.lang.Object#equals(java.lang.Object)
	 * @param aThat
	 *            Object to compare with
	 * @return true/false
	 */
	@Override
	public boolean equals(final Object aThat) {
		Object proxyThat = aThat;

		if (this == aThat) {
			return true;
		}

		if (aThat instanceof HibernateProxy) {
			// narrow down the proxy to the class we are dealing with.
			try {
				proxyThat = ((HibernateProxy) aThat).getHibernateLazyInitializer().getImplementation();
			} catch (org.hibernate.ObjectNotFoundException e) {
				return false;
			}
		}
		if (aThat == null) {
			return false;
		}

		final TblMappingRules that;
		try {
			that = (TblMappingRules) proxyThat;
			if (!(that.getClassType().equals(this.getClassType()))) {
				return false;
			}
		} catch (org.hibernate.ObjectNotFoundException e) {
			return false;
		} catch (ClassCastException e) {
			return false;
		}

		boolean result = true;
		result = result && (((this.getId() == null) && (that.getId() == null)) || (this.getId() != null && this.getId().equals(that.getId())));
		result = result && (((getAnyRegionUse() == null) && (that.getAnyRegionUse() == null))
				|| (getAnyRegionUse() != null && getAnyRegionUse().equals(that.getAnyRegionUse())));
		result = result && (((getScope() == null) && (that.getScope() == null)) || (getScope() != null && getScope().equals(that.getScope())));
		return result;
	}

	/**
	 * Calculate the hashcode.
	 * 
	 * @see java.lang.Object#hashCode()
	 * @return a calculated number
	 */
	@Override
	public int hashCode() {
		if (this.hashCode == null) {
			synchronized (this) {
				if (this.hashCode == null) {
					Integer newHashCode = null;

					if (getId() != null) {
						newHashCode = SAVED_HASHES.get(getId());
					}

					if (newHashCode == null) {
						if (getId() != null && getId() != 0) {
							newHashCode = getId();
						} else {

						}
					}

					this.hashCode = newHashCode;
				}
			}
		}
		return (Integer) this.hashCode;
	}


}
